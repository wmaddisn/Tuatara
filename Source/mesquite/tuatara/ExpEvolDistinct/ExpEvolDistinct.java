/* Mesquite source code, Tuatara package.  Copyright 2007 W. Maddison & A. Mooers. Version 1.01, August 2009Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.tuatara.ExpEvolDistinct;/*~~  */import mesquite.cont.lib.*;import mesquite.lib.*;import mesquite.tuatara.lib.*;/** ======================================================================== */public class ExpEvolDistinct extends ConsValueForTaxon {	double [][] cladeSizeProbs, credit;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		return true;  	}  	 public boolean needExtProbByDefault(){  		 return true;  	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */	public boolean requestPrimaryChoice(){		return true;  	}	/*.................................................................................................................*/	public   void downPass(int node, Tree tree, ContinuousDistribution states, double [][] cladeSizeProbs) {		if (tree.nodeIsTerminal(node)){			double probExtinction = getProbabilityOfExtinction(tree.getTaxa(), tree.taxonNumberOfNode(node), states);			cladeSizeProbs[node][0] = probExtinction;			cladeSizeProbs[node][1] = 1.0-probExtinction;		}		else {			int left = tree.firstDaughterOfNode(node);			downPass(left, tree, states, cladeSizeProbs);			int right = tree.lastDaughterOfNode(node);			downPass(right, tree, states, cladeSizeProbs);			for (int total = 0; total < cladeSizeProbs[node].length; total++){ //for each possible total				double prob = 0; //start sum of probability				for (int numLeft = 0; numLeft<=total; numLeft++){					int numRight = total - numLeft;					prob += cladeSizeProbs[left][numLeft]* cladeSizeProbs[right][numRight];				}				cladeSizeProbs[node][total] = prob;			}		}	}	private double getBranchLength(Tree tree, int node){		return tree.getBranchLength( node, 0);	}	/*.................................................................................................................*/	public   void upPass(int node, Tree tree, ContinuousDistribution states, double [][] cladeSizeProbs, double [][] credit, NumberArray results) {		if (tree.nodeIsTerminal(node)){			results.setValue(tree.taxonNumberOfNode(node), credit[node][1] + getBranchLength(tree, node));		}		else {			int max = tree.numberOfTerminalsInClade(node);			//first, take credit for your own branch			for (int total = 0; total <=max; total++)				credit[node][total] += getBranchLength(tree, node);			int left = tree.firstDaughterOfNode(node);			int right = tree.lastDaughterOfNode(node);			/*About to distribute credit to two daughters.  			 * Credit at this node was passed up from below;			 * This credit plus this node's own length together form the credit to be distributed among the daughters			 *Credit to left given numLeft = 2 is sum of all the credits under all the situations where numLeft = 2			 **/			int maxLeft = tree.numberOfTerminalsInClade(left);			int maxRight = tree.numberOfTerminalsInClade(right);			for (int numLeft = 0; numLeft<=maxLeft; numLeft++){				for (int numRight = 0; numRight<=maxRight; numRight++){					int total = numLeft + numRight;					if (total > 0){						double toBeDistributed = credit[node][total];						//if there are numLeft on left, numRight on right, then the credit to the left is						if (numLeft > 0 )							credit[left][numLeft] += (numLeft*1.0/total)*cladeSizeProbs[right][numRight]*toBeDistributed;						//similarly, if there are numLeft on left, numRight on right, then the credit to the right is						if (numRight > 0)							credit[right][numRight] += (numRight*1.0/total)*cladeSizeProbs[left][numLeft]*toBeDistributed;					}				}			}						upPass(left, tree, states, cladeSizeProbs, credit, results);			upPass(right, tree, states, cladeSizeProbs, credit, results);		}	}	boolean warned = false;	/*.................................................................................................................*/	public void calculatePriorities(Taxa taxa, Tree tree, NumberArray results, MesquiteString resultsString){		if (tree == null || results == null)			return;		if (tree.hasPolytomies(tree.getRoot())){			if (!warned)				discreetAlert("Sorry, " + getName() + " cannot do its calculations on polytomous trees");			results.deassignArray();			warned = true;			return;		}				if (cladeSizeProbs == null || cladeSizeProbs.length < tree.getNumNodeSpaces() ||  cladeSizeProbs[0].length < taxa.getNumTaxa()+1)			cladeSizeProbs = new double[tree.getNumNodeSpaces()][taxa.getNumTaxa()+1];		if (credit == null || credit.length < tree.getNumNodeSpaces() ||  credit[0].length < taxa.getNumTaxa()+1)			credit = new double[tree.getNumNodeSpaces()][taxa.getNumTaxa()+1];		Double2DArray.zeroArray(cladeSizeProbs);		Double2DArray.zeroArray(credit);		clearResultAndLastResult(results);		observedStates = (ContinuousDistribution)characterSourceTask.getCurrentCharacter(tree);		//calculate probs of different clade sizes		downPass(tree.getRoot(), tree, observedStates, cladeSizeProbs);		//calculate credit to each top		upPass(tree.getRoot(), tree, observedStates, cladeSizeProbs, credit, results);		//harvest array		saveLastResult(results);		saveLastResultString(resultsString);	}	/*.................................................................................................................*/	public String getVeryShortName() {		if (riskWeight.getValue())			return "Exp.EDGE";		return "Exp.ED";	}	/*.................................................................................................................*/	public String getName() {		return "Expected Evolutionary Distinctiveness, species";	}	/*.................................................................................................................*/	public String getVersion() {		return null;	}	/*.................................................................................................................*/	public boolean isPrerelease() {		return false;	}	/*.................................................................................................................*/	/** returns an explanation of what the module does.*/	public String getExplanation() {		return "Measures the expected (after probabilistic extinction) length of the species' terminal branch plus its species-weighted shares of ancestral branches (ED and EDGE of Isaac et al. 2007)";	}}