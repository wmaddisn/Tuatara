/* Mesquite source code, Tuatara package.  Copyright 2007 W. Maddison & A. Mooers. Version 1.01, August 2009Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.tuatara.ExpEvolDistinctClades;/*~~  */import mesquite.cont.lib.*;import mesquite.categ.lib.*;import mesquite.lib.*;import mesquite.tuatara.lib.*;/** ======================================================================== */public class ExpEvolDistinctClades extends ConsValueForTaxon {	double [] probExtinct, credit;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		return true;  	}	 public boolean needExtProbByDefault(){  		 return true;  	 }	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */	public boolean requestPrimaryChoice(){		return true;  	}	/*.................................................................................................................*/	public   void downPass(int node, Tree tree, ContinuousDistribution states, double [] probExtinct) {		if (tree.nodeIsTerminal(node)){			probExtinct[node] = getProbabilityOfExtinction(tree.getTaxa(), tree.taxonNumberOfNode(node), states);		}		else {			probExtinct[node] = 1.0;			for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)){				downPass(d, tree, states, probExtinct);				probExtinct[node] *= probExtinct[d];			}		}	}	private double getBranchLength(Tree tree, int node){		return tree.getBranchLength( node, 0);	}	int maxPoly = 26;	double[] probDExt = new double[maxPoly]; //since only polytomies this big allowed	double[][] probNumSisters = new double[maxPoly][maxPoly]; //since only polytomies this big allowed	long scenario = 0;	void makeScenarios(long set, int i, int num){		if (i<num){  //still making scenario			makeScenarios(set, i+1, num);  //			set = CategoricalState.addToSet(set, i);			makeScenarios(set, i+1, num);		}		else { //hit the end; now assess probabilities			//first, assess probability of this scenario & count how many are alive			double probScenario = 1.0;			int count = 0; //how many surviving daughters are in this scenario?			for (int k = 0; k<num; k++){				if (CategoricalState.isElement(set, k)){  //daughter k survives in this scenario					probScenario *= (1.0-probDExt[k]);					count++;				}				else 					probScenario *= probDExt[k];			}			//now, add this probability to the array summarizing probability of different numbers of daughters			for (int k = 0; k<num; k++){				if (CategoricalState.isElement(set, k)){					probNumSisters[k][count-1] += probScenario;  //add to prob kth daughter will have count sisters given that it survives itself				}			}			scenario++;			if (num > 10 && scenario %10 == 0)				CommandRecord.tick("Scenario " + scenario + " of " + Math.pow(2.0, num));		}	}	/*.................................................................................................................*/	void upPass(int node, Tree tree, ContinuousDistribution states, double [] probExtinct, double [] credit, NumberArray results) {		if (tree.nodeIsTerminal(node)){			results.setValue(tree.taxonNumberOfNode(node), credit[node] + getBranchLength(tree, node));		}		else {			double toBeDistributed = credit[node] +  getBranchLength(tree, node);			//assessing probabilities of various scenarios of daughter extinction.  First, initializing.			int numDaughters = tree.numberOfDaughtersOfNode(node);			for (int k=0;k<numDaughters; k++)				for (int i=0; i<numDaughters; i++)					probNumSisters[k][i] = 0.0;			int k = 0;			for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))				probDExt[k++] = probExtinct[d];			//Now, to assess the senarios			scenario = 0;			makeScenarios(0L, 0, numDaughters);			if (numDaughters > 10)				CommandRecord.tick("Counting credit ");			//distributing credit according to probabilities			k = 0;			for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)){				if ((1-probDExt[k]) != 0){  //this daughter has a chance to survivie					credit[d]  += probNumSisters[k][0]/(1-probDExt[k])*toBeDistributed;  //it gets all credit if only it survives					for (int i=1; i<numDaughters; i++)						credit[d]  += probNumSisters[k][i]/(1-probDExt[k])*(toBeDistributed/(double)(i+1)); //it gets 1/i th credit if i sisters survive				}				k++;			}			//continuing up the tree			for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d))				upPass(d, tree, states, probExtinct, credit, results);		}	}	/*.................................................................................................................*/	public   boolean treeOK(int node, Tree tree) {		if (tree.nodeIsTerminal(node)){			return true;		}		else {			if (tree.numberOfDaughtersOfNode(node)> maxPoly)				return false;			for (int d = tree.firstDaughterOfNode(node); tree.nodeExists(d); d = tree.nextSisterOfNode(d)){				if (!treeOK(d, tree))					return false;			}			return true;		}	}	boolean warned = false;	/*.................................................................................................................*/	public void calculatePriorities(Taxa taxa, Tree tree, NumberArray results, MesquiteString resultsString){		if (tree == null || results == null)			return;		if (!treeOK(tree.getRoot(), tree)){			if (!warned)				discreetAlert( "Sorry, " + getName() + " cannot do its calculations on trees with polytomies of more than " + maxPoly +" edges");			results.deassignArray();			warned = true;			return;		}		if (probExtinct == null || probExtinct.length < tree.getNumNodeSpaces())			probExtinct = new double[tree.getNumNodeSpaces()];		if (credit == null || credit.length < tree.getNumNodeSpaces())			credit = new double[tree.getNumNodeSpaces()];		DoubleArray.zeroArray(probExtinct);		DoubleArray.zeroArray(credit);		clearResultAndLastResult(results);		observedStates = (ContinuousDistribution)characterSourceTask.getCurrentCharacter(tree);		//calculate probs of different clade sizes		downPass(tree.getRoot(), tree, observedStates, probExtinct);		//calculate credit to each top		upPass(tree.getRoot(), tree, observedStates, probExtinct, credit, results);		//harvest array		saveLastResult(results);		saveLastResultString(resultsString);	}		/*.................................................................................................................*/	public String getVeryShortName() {		if (riskWeight.getValue())			return "Exp.EDcGE";		return "Exp.EDc";	}	/*.................................................................................................................*/	public String getName() {		return "Expected Evolutionary Distinctiveness, clades";	}	/*.................................................................................................................*/	public String getVersion() {		return null;	}	/*.................................................................................................................*/	public boolean isPrerelease() {		return false;	}	/*.................................................................................................................*/	/** returns an explanation of what the module does.*/	public String getExplanation() {		return "Measures the expected (after probabilistic extinction) length of the species' terminal branch plus its clade-weighted shares of ancestral branches (EDc and EDcGE, called equal splits and expected loss by Redding & Mooers, 2006)";	}}