/* Mesquite source code, Tuatara package.  Copyright 2007 W. Maddison & A. Mooers. Version 1.01, August 2009Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.tuatara.TotalPhylDiversity;/*~~  */import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class TotalPhylDiversity extends NumberForTree {	Taxa taxa;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		return true;	}	public boolean anySelected(Taxa taxa, Tree tree, int node) {		if (tree.nodeIsTerminal(node)) { 			return (taxa.getSelected(tree.taxonNumberOfNode(node)));		}		else {			for (int daughter = tree.firstDaughterOfNode(node); tree.nodeExists(daughter); daughter = tree.nextSisterOfNode(daughter)) {				if (anySelected(taxa, tree, daughter))					return true;			}			return false;		}	}	public double totalPathSelected(Taxa taxa, Tree tree, int node) {		if (!anySelected(taxa, tree, node))			return 0;		if (tree.nodeIsTerminal(node)) { 			if (tree.branchLengthUnassigned(node))				return 0;			else				return tree.getBranchLength(node);		}		else {			double sum = 0;			for (int daughter = tree.firstDaughterOfNode(node); tree.nodeExists(daughter); daughter = tree.nextSisterOfNode(daughter)) {				sum += totalPathSelected(taxa, tree, daughter);			}			if (!tree.branchLengthUnassigned(node))				sum += tree.getBranchLength(node);			return sum;		}	}	public double totalPath(Tree tree, int node) {		if (tree.nodeIsTerminal(node)) { 			if (tree.branchLengthUnassigned(node))				return 0;			else				return tree.getBranchLength(node);		}		else {			double sum = 0;			for (int daughter = tree.firstDaughterOfNode(node); tree.nodeExists(daughter); daughter = tree.nextSisterOfNode(daughter)) {				sum += totalPath(tree, daughter);			}			if (!tree.branchLengthUnassigned(node))				sum += tree.getBranchLength(node);			return sum;		}	}	public void endJob(){		if (taxa != null )			taxa.removeListener(this);		super.endJob();	}	/** Called to provoke any necessary initialization.  This helps prevent the module's intialization queries to the user from   	happening at inopportune times (e.g., while a long chart calculation is in mid-progress)*/	public void initialize(Tree tree){		if (tree == null)			return;		Taxa tTaxa = tree.getTaxa();		if (taxa != null && tTaxa != taxa)			taxa.removeListener(this);		if (tTaxa != taxa){			tTaxa.addListener(this);			taxa = tTaxa;		}	}	/*.................................................................................................................*/	public void calculateNumber(Tree tree, MesquiteNumber result, MesquiteString resultString) {		if (result==null)			return;		initialize(tree);		clearResultAndLastResult(result);		if (tree.hasBranchLengths()){			if (anySelected(tree.getTaxa(), tree, tree.getRoot())){				result.setValue(totalPathSelected(tree.getTaxa(), tree, tree.getRoot()));			}			else				result.setValue(totalPath(tree, tree.getRoot()));		}		else			result.setValue(0);		if (resultString!=null)			resultString.setValue("Total PD: "+ result.toString());		saveLastResult(result);		saveLastResultString(resultString);	}	/** passes which object changed, along with optional Notification object with details (e.g., code number (type of change) and integers (e.g. which character))*/	public void changed(Object caller, Object obj, Notification notification){		if (obj == taxa){			int code = notification.getCode();			if (code == MesquiteListener.SELECTION_CHANGED)  // any other substantive changes will provoke change anyway				parametersChanged(null);		}	}	/*.................................................................................................................*/	public boolean isPrerelease(){		return false;	}	/*.................................................................................................................*/	public boolean showCitation(){		return true;	}	/*.................................................................................................................*/	public String getVeryShortName() {		return "Total PD";	}	/*.................................................................................................................*/	public String getName() {		return "Total Phylogenetic Diversity";	}	/*.................................................................................................................*/	public String getExplanation() {		return "Calculates the sum of branch lengths of the tree, treating unassigned lengths as 0.  The length of the root is counted.  If taxa are selected, it counts only the smallest subtree containing the selected taxa (but down to and including the root).";	}}