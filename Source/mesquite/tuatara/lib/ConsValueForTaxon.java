/* Mesquite source code, Tuatara package.  Copyright 2007 W. Maddison & A. Mooers. Version 1.01, August 2009Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.tuatara.lib;import mesquite.cont.lib.ContinuousDistribution;import mesquite.cont.lib.ContinuousState;import mesquite.lib.*;import mesquite.lib.duties.CharSourceCoord;import mesquite.treefarm.lib.*;/* ======================================================================== *//**Supplies a number for a taxon.*/public abstract class ConsValueForTaxon extends NForTaxonWithTree  {	protected CharSourceCoord characterSourceTask;	protected ContinuousDistribution  observedStates;	protected MesquiteBoolean riskWeight = new MesquiteBoolean(false);	static final int SELECTED_Secure = 0;  	static final int SELECTED_Extinct = 1;	static final int SELECTED_Ignore = 2;	StringArray selectedModes;	int selectedMode = SELECTED_Secure;	MesquiteString selectedModeName;	/*.................................................................................................................*/	/** superStartJob is called automatically when an employee is hired.  This is intended for use by superclasses of modules that need	their own constructor-like call, without relying on the subclass to be polite enough to call super.startJob().*/	public boolean superStartJob(String arguments, Object condition, boolean hiredByName){		if (condition == null || !(condition instanceof MesquiteBoolean) || ((MesquiteBoolean)condition).getValue()){			if (!MesquiteThread.isScripting())				riskWeight.setValue(AlertDialog.query(containerOfModule(), "Weight by Risk", "Weight conservation priority by Extinction Risk? (\"GE\").\n\nIf you ask to weight, you will be asked to choose a source of characters, which must be continuous characters listing the extinction probabilities.  If you don't have such characters stored in the file, you probably don't want to weight by extinction risk.", "Weight", "Don't Weight"));			addCheckMenuItem(null, "Weight by Risk (GE)", makeCommand("toggleWeight", this), riskWeight);			selectedModes = new StringArray(3);  			selectedModes.setValue(SELECTED_Secure, "Selected Species are Secure");  //the strings passed will be the menu item labels			selectedModes.setValue(SELECTED_Extinct, "Selected Species are Extinct");			selectedModes.setValue(SELECTED_Ignore, "Ignore Species Selection");			selectedModeName = new MesquiteString(selectedModes.getValue(selectedMode));  //this helps the menu keep track of checkmenuitems			MesquiteSubmenuSpec mss = addSubmenu(null, "Selected Species", makeCommand("setSelectedMode", this), selectedModes); 			mss.setSelected(selectedModeName);		}		if (needExtProbByDefault() || riskWeight.getValue()){			characterSourceTask = (CharSourceCoord)hireCompatibleEmployee(CharSourceCoord.class, ContinuousState.class, "Source of characters for " + getName());			if (characterSourceTask == null) {				return sorry(getName() + " couldn't start because no source of characters obtained.");			}		}		return true;	}	void hireCharacterSourceIfNeeded(){		if (characterSourceTask == null)			characterSourceTask = (CharSourceCoord)hireCompatibleEmployee(CharSourceCoord.class, ContinuousState.class, "Source of characters for " + getName());	}	public Class getDutyClass() {		return ConsValueForTaxon.class;	}	public abstract boolean needExtProbByDefault();	public String getDutyName() {		return "Conservation value for taxon";	}	public String[] getDefaultModule() {		return new String[] {"#EvolDistinct"};	}	/*.................................................................................................................*/	public Snapshot getSnapshot(MesquiteFile file) {		Snapshot temp = new Snapshot();		temp.addLine("toggleWeight " + riskWeight.toOffOnString());		if (riskWeight.getValue() || needExtProbByDefault())			temp.addLine( "getCharacterSource " , characterSourceTask);		temp.addLine("setSelectedMode " + ParseUtil.tokenize(selectedModes.getValue(selectedMode)));		return temp;	}	/*.................................................................................................................*/	public Object doCommand(String commandName, String arguments, CommandChecker checker) {		if (checker.compare(this.getClass(), "Returns module supplying characters", null, commandName, "getCharacterSource")) {			return characterSourceTask;		}		else if (checker.compare(this.getClass(), "Sets whether or not to weight by extinction risk", "[on = weight; off]", commandName, "toggleWeight")) {			riskWeight.toggleValue(parser.getFirstToken(arguments));			if (riskWeight.getValue())				hireCharacterSourceIfNeeded();			if (!MesquiteThread.isScripting())				parametersChanged(null);		}		else if (checker.compare(getClass(), "Sets the selected mode", null, commandName, "setSelectedMode")) {			String name = parser.getFirstToken(arguments); //get argument passed of option chosen			int newMode = selectedModes.indexOf(name); //see if the option is recognized by its name			if (newMode >=0 && newMode!=selectedMode){				selectedMode = newMode; //change mode				selectedModeName.setValue(selectedModes.getValue(selectedMode)); //so that menu item knows to become checked				if (!MesquiteThread.isScripting())					parametersChanged(); //this tells employer module that things changed, and recalculation should be requested			}		}		else			return  super.doCommand(commandName, arguments, checker);		return null;	}	/*.................................................................................................................*/	protected boolean extinctionProbabilityDefined(Taxa taxa, int it, ContinuousDistribution states){		if (selectedMode != SELECTED_Ignore && taxa.getSelected(it))			return true;		else {			double p =  states.getState(it, 0);   			if (!MesquiteDouble.isCombinable(p))				return false;			else if (p<0)				return false;			else if (p> 1.0)				return false;			else				return true;		}	}	/*.................................................................................................................*/	protected double getProbabilityOfExtinction(Taxa taxa, int it, ContinuousDistribution states){		try {			if (states == null || taxa == null)				return 0.0;			else if (selectedMode == SELECTED_Secure && taxa.getSelected(it))				return 0.0;			else if (selectedMode == SELECTED_Extinct && taxa.getSelected(it))				return 1.0;			else {				double p =  states.getState(it, 0);   				if (!MesquiteDouble.isCombinable(p))					return 0.0;				else if (p<0)					return 0.0;				else if (p> 1.0)					return 1.0;				else					return p;			}		}		catch(NullPointerException e){		}		return 0;	}	/*.................................................................................................................*/	public abstract void calculatePriorities(Taxa taxa, Tree tree, NumberArray results, MesquiteString resultsString);	/*.................................................................................................................*/	public void calculateNumbers(Taxa taxa, Tree tree, NumberArray results, MesquiteString resultsString){		registerTaxa(taxa);		calculatePriorities(taxa, tree, results, resultsString);		if (riskWeight.getValue()){			if (!needExtProbByDefault() && characterSourceTask != null)				observedStates = (ContinuousDistribution)characterSourceTask.getCurrentCharacter(tree);			if (results != null && observedStates != null){				for (int it =0; it<results.getSize() && it<observedStates.getNumNodes(); it++){					if (results.isUnassigned(it) || !extinctionProbabilityDefined(taxa, it, observedStates))						results.setToUnassigned(it);					else						results.setValue(it, results.getDouble(it)* getProbabilityOfExtinction(taxa, it, observedStates));				}			}			saveLastResult(results);			saveLastResultString(resultsString);		}	}	/*.................................................................................................................*/	Taxa taxa;	private void registerTaxa(Taxa taxa){		if (this.taxa == taxa)			return;		if (this.taxa != null && this.taxa != taxa)			this.taxa.removeListener(this);		this.taxa = taxa;		taxa.addListener(this);	}	public void endJob(){		super.endJob();		if (taxa != null)			taxa.removeListener(this);	}	public void changed(Object caller, Object obj, Notification notification){		int code = Notification.getCode(notification);		if (obj == taxa && code == MesquiteListener.SELECTION_CHANGED && (riskWeight.getValue() || needExtProbByDefault())){			parametersChanged();		}	}	/*.................................................................................................................*/	public boolean showCitation(){		return true;	}}